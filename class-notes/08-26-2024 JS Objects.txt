RECAP:
Object: it is a reference date type and stores data in key-value pairs
Object properties ar enot index based
Object properties can be accessed, updated, deleted using the keys.

*** keys are by default string and UNIQUE!!!
*** values can be of any type and duplicates.


const obj1 = {};
const obj2 = new Object();


// adding a property
obj2.name = 'smth';

// updating a property
obj2.name = 'smth else';

// delete a property
delete obj2.name;


const phone= {
    brand: 'Samsung',
    price: 10.99,
    delivery: ['shipping', 'pick-up'],
    quantity: 96,
    reviews: 4.6
};

for(const key in phone){
    console.log(key);
    console.log(phone[key]);
}


Built-in Object Static Methods
Object.keys(); -> it takes an object variable as argument and retunrs all the keys as an array
Object.values(); -> it takes an object variable as argument and retunrs all the values as an array
Object.entries(); -> it takes an object variable as argument and retunrs all the key-value pairs as a nested array

for(const key of Object.keys(phone)){
    console.log(key);
}

OUTPUT:
brand
price
delivery
quantity
reviews

for(const value of Object.values(phone)){
    console.log(value);
}

OUTPUT:
Samsung
10.99
['shipping', 'pick-up']
96
4.6

for(const entry of Object.entries(phone)){
    console.log(entry);
}

OUTPUT:
['brand', 'Samsung']
['price', 10.99]
..
..
..


for(const [key, value] of Object.entries(phone)){
    console.log(key, value);
}

OUTPUT:
brand, Samsung
price, 10.99
..
..
..


const person = {
    fname: 'John',
    lname: 'Doe',
    fullname: function(){
        return `${fname} ${lname}`
    }
}

console.log(person.fullname()); // 'John Doe'